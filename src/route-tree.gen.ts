/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as AppSignUpImport } from './routes/_app/sign-up'
import { Route as AppSignInImport } from './routes/_app/sign-in'
import { Route as AppForgotPasswordImport } from './routes/_app/forgot-password'
import { Route as AppAboutImport } from './routes/_app/about'
import { Route as AppProtectedImport } from './routes/_app/_protected'
import { Route as AppAuthSuccessImport } from './routes/_app/auth/success'
import { Route as AppAuthErrorImport } from './routes/_app/auth/error'
import { Route as AppProtectedUpdatePasswordImport } from './routes/_app/_protected/update-password'
import { Route as AppProtectedProtectedImport } from './routes/_app/_protected/protected'
import { Route as AppProtectedAccountImport } from './routes/_app/_protected/account'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppSignUpRoute = AppSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AppRoute,
} as any)

const AppSignInRoute = AppSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AppRoute,
} as any)

const AppForgotPasswordRoute = AppForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AppRoute,
} as any)

const AppAboutRoute = AppAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AppRoute,
} as any)

const AppProtectedRoute = AppProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => AppRoute,
} as any)

const AppAuthSuccessRoute = AppAuthSuccessImport.update({
  id: '/auth/success',
  path: '/auth/success',
  getParentRoute: () => AppRoute,
} as any)

const AppAuthErrorRoute = AppAuthErrorImport.update({
  id: '/auth/error',
  path: '/auth/error',
  getParentRoute: () => AppRoute,
} as any)

const AppProtectedUpdatePasswordRoute = AppProtectedUpdatePasswordImport.update(
  {
    id: '/update-password',
    path: '/update-password',
    getParentRoute: () => AppProtectedRoute,
  } as any,
)

const AppProtectedProtectedRoute = AppProtectedProtectedImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => AppProtectedRoute,
} as any)

const AppProtectedAccountRoute = AppProtectedAccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AppProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/_protected': {
      id: '/_app/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppProtectedImport
      parentRoute: typeof AppImport
    }
    '/_app/about': {
      id: '/_app/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AppAboutImport
      parentRoute: typeof AppImport
    }
    '/_app/forgot-password': {
      id: '/_app/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AppForgotPasswordImport
      parentRoute: typeof AppImport
    }
    '/_app/sign-in': {
      id: '/_app/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AppSignInImport
      parentRoute: typeof AppImport
    }
    '/_app/sign-up': {
      id: '/_app/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AppSignUpImport
      parentRoute: typeof AppImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/_protected/account': {
      id: '/_app/_protected/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AppProtectedAccountImport
      parentRoute: typeof AppProtectedImport
    }
    '/_app/_protected/protected': {
      id: '/_app/_protected/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof AppProtectedProtectedImport
      parentRoute: typeof AppProtectedImport
    }
    '/_app/_protected/update-password': {
      id: '/_app/_protected/update-password'
      path: '/update-password'
      fullPath: '/update-password'
      preLoaderRoute: typeof AppProtectedUpdatePasswordImport
      parentRoute: typeof AppProtectedImport
    }
    '/_app/auth/error': {
      id: '/_app/auth/error'
      path: '/auth/error'
      fullPath: '/auth/error'
      preLoaderRoute: typeof AppAuthErrorImport
      parentRoute: typeof AppImport
    }
    '/_app/auth/success': {
      id: '/_app/auth/success'
      path: '/auth/success'
      fullPath: '/auth/success'
      preLoaderRoute: typeof AppAuthSuccessImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppProtectedRouteChildren {
  AppProtectedAccountRoute: typeof AppProtectedAccountRoute
  AppProtectedProtectedRoute: typeof AppProtectedProtectedRoute
  AppProtectedUpdatePasswordRoute: typeof AppProtectedUpdatePasswordRoute
}

const AppProtectedRouteChildren: AppProtectedRouteChildren = {
  AppProtectedAccountRoute: AppProtectedAccountRoute,
  AppProtectedProtectedRoute: AppProtectedProtectedRoute,
  AppProtectedUpdatePasswordRoute: AppProtectedUpdatePasswordRoute,
}

const AppProtectedRouteWithChildren = AppProtectedRoute._addFileChildren(
  AppProtectedRouteChildren,
)

interface AppRouteChildren {
  AppProtectedRoute: typeof AppProtectedRouteWithChildren
  AppAboutRoute: typeof AppAboutRoute
  AppForgotPasswordRoute: typeof AppForgotPasswordRoute
  AppSignInRoute: typeof AppSignInRoute
  AppSignUpRoute: typeof AppSignUpRoute
  AppIndexRoute: typeof AppIndexRoute
  AppAuthErrorRoute: typeof AppAuthErrorRoute
  AppAuthSuccessRoute: typeof AppAuthSuccessRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppProtectedRoute: AppProtectedRouteWithChildren,
  AppAboutRoute: AppAboutRoute,
  AppForgotPasswordRoute: AppForgotPasswordRoute,
  AppSignInRoute: AppSignInRoute,
  AppSignUpRoute: AppSignUpRoute,
  AppIndexRoute: AppIndexRoute,
  AppAuthErrorRoute: AppAuthErrorRoute,
  AppAuthSuccessRoute: AppAuthSuccessRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppProtectedRouteWithChildren
  '/about': typeof AppAboutRoute
  '/forgot-password': typeof AppForgotPasswordRoute
  '/sign-in': typeof AppSignInRoute
  '/sign-up': typeof AppSignUpRoute
  '/': typeof AppIndexRoute
  '/account': typeof AppProtectedAccountRoute
  '/protected': typeof AppProtectedProtectedRoute
  '/update-password': typeof AppProtectedUpdatePasswordRoute
  '/auth/error': typeof AppAuthErrorRoute
  '/auth/success': typeof AppAuthSuccessRoute
}

export interface FileRoutesByTo {
  '': typeof AppProtectedRouteWithChildren
  '/about': typeof AppAboutRoute
  '/forgot-password': typeof AppForgotPasswordRoute
  '/sign-in': typeof AppSignInRoute
  '/sign-up': typeof AppSignUpRoute
  '/': typeof AppIndexRoute
  '/account': typeof AppProtectedAccountRoute
  '/protected': typeof AppProtectedProtectedRoute
  '/update-password': typeof AppProtectedUpdatePasswordRoute
  '/auth/error': typeof AppAuthErrorRoute
  '/auth/success': typeof AppAuthSuccessRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/_protected': typeof AppProtectedRouteWithChildren
  '/_app/about': typeof AppAboutRoute
  '/_app/forgot-password': typeof AppForgotPasswordRoute
  '/_app/sign-in': typeof AppSignInRoute
  '/_app/sign-up': typeof AppSignUpRoute
  '/_app/': typeof AppIndexRoute
  '/_app/_protected/account': typeof AppProtectedAccountRoute
  '/_app/_protected/protected': typeof AppProtectedProtectedRoute
  '/_app/_protected/update-password': typeof AppProtectedUpdatePasswordRoute
  '/_app/auth/error': typeof AppAuthErrorRoute
  '/_app/auth/success': typeof AppAuthSuccessRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/'
    | '/account'
    | '/protected'
    | '/update-password'
    | '/auth/error'
    | '/auth/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/about'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/'
    | '/account'
    | '/protected'
    | '/update-password'
    | '/auth/error'
    | '/auth/success'
  id:
    | '__root__'
    | '/_app'
    | '/_app/_protected'
    | '/_app/about'
    | '/_app/forgot-password'
    | '/_app/sign-in'
    | '/_app/sign-up'
    | '/_app/'
    | '/_app/_protected/account'
    | '/_app/_protected/protected'
    | '/_app/_protected/update-password'
    | '/_app/auth/error'
    | '/_app/auth/success'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/_protected",
        "/_app/about",
        "/_app/forgot-password",
        "/_app/sign-in",
        "/_app/sign-up",
        "/_app/",
        "/_app/auth/error",
        "/_app/auth/success"
      ]
    },
    "/_app/_protected": {
      "filePath": "_app/_protected.tsx",
      "parent": "/_app",
      "children": [
        "/_app/_protected/account",
        "/_app/_protected/protected",
        "/_app/_protected/update-password"
      ]
    },
    "/_app/about": {
      "filePath": "_app/about.tsx",
      "parent": "/_app"
    },
    "/_app/forgot-password": {
      "filePath": "_app/forgot-password.tsx",
      "parent": "/_app"
    },
    "/_app/sign-in": {
      "filePath": "_app/sign-in.tsx",
      "parent": "/_app"
    },
    "/_app/sign-up": {
      "filePath": "_app/sign-up.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/_protected/account": {
      "filePath": "_app/_protected/account.tsx",
      "parent": "/_app/_protected"
    },
    "/_app/_protected/protected": {
      "filePath": "_app/_protected/protected.tsx",
      "parent": "/_app/_protected"
    },
    "/_app/_protected/update-password": {
      "filePath": "_app/_protected/update-password.tsx",
      "parent": "/_app/_protected"
    },
    "/_app/auth/error": {
      "filePath": "_app/auth/error.tsx",
      "parent": "/_app"
    },
    "/_app/auth/success": {
      "filePath": "_app/auth/success.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
